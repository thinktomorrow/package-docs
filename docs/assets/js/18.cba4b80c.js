(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{170:function(e,t,i){"use strict";i.r(t);var o=i(0),r=Object(o.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("div",{staticClass:"content"},[i("h1",{attrs:{id:"git-workflow"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow","aria-hidden":"true"}},[e._v("#")]),e._v(" Git workflow")]),e._v(" "),i("h2",{attrs:{id:"environments"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#environments","aria-hidden":"true"}},[e._v("#")]),e._v(" Environments")]),e._v(" "),i("ul",[i("li",[e._v("Production")]),e._v(" "),i("li",[e._v("Staging")]),e._v(" "),i("li",[e._v("Develop?")])]),e._v(" "),i("h2",{attrs:{id:"branches"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#branches","aria-hidden":"true"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),i("p",[e._v("We always work with feature branches. If possible you should squash your commits "),i("em",[e._v("before")]),e._v(" merging to master.\nThe only exception are unplanned hotfixes where you need to quickly provide a fix on master branch.\nPlanned development should honour our branch workflow.")]),e._v(" "),i("div",{staticClass:"warning custom-block"},[i("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),i("p",[e._v("The master branch is always considered to be stable and ready to deploy to production.")])]),e._v(" "),i("p",[e._v("Github flow: https://guides.github.com/introduction/flow/")]),e._v(" "),i("p",[e._v("Branches have following naming conventions:")]),e._v(" "),i("ul",[i("li",[e._v("they should start with "),i("code",[e._v("ft/")]),e._v(", "),i("code",[e._v("fix")]),e._v(" or "),i("code",[e._v("test")]),e._v(" for resp. feature development, bugfixes or testing stuff.")]),e._v(" "),i("li",[e._v("The name should be descriptive and clear on the subject.")]),e._v(" "),i("li",[e._v("The may should only contain lowercase letters and hyphens. Except for the /")]),e._v(" "),i("li",[e._v("some examples are: "),i("code",[e._v("ft/sabco-export")]),e._v(", "),i("code",[e._v("fix/catalog-filter-mobile")]),e._v(", "),i("code",[e._v("test/db-benchmark")]),e._v(".")])]),e._v(" "),i("h2",{attrs:{id:"commits"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#commits","aria-hidden":"true"}},[e._v("#")]),e._v(" Commits")]),e._v(" "),i("p",[e._v("We advice to use clear and descriptive commit messages. A commit should deal with one specific change. Try to avoid several different changes into one commit.\nWe prefer to use present tense and try to avoid verbs in the past tense. We notice a message is more clear and quickly gets to the point if you start with the verb itself.")]),e._v(" "),i("p",[e._v("Generic wordings like 'wip', 'fixes', 'improvements',.. do not provide any context.\nSome good examples:")]),e._v(" "),i("ul",[i("li",[e._v("Fix payment icon")]),e._v(" "),i("li",[e._v("Improve button")]),e._v(" "),i("li",[e._v("Hotfix Controller typo")])]),e._v(" "),i("p",[e._v("Event better and more descriptive:")]),e._v(" "),i("ul",[i("li",[e._v("Fix payment icon in the navigation bar")]),e._v(" "),i("li",[e._v("Improve button wordings")]),e._v(" "),i("li",[e._v("Hotfix typo in HomeController")])]),e._v(" "),i("h2",{attrs:{id:"pull-requests"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#pull-requests","aria-hidden":"true"}},[e._v("#")]),e._v(" Pull requests")]),e._v(" "),i("p",[e._v("After a feature or has been developed, a pull request should be created on github. This sets the feature up for review.\nAt least one of the other projectteam members should revise your code. It is preferred for the reviewer to pull\nthe branch locally and inspect and verify the feature within a working application. Communication around the\nPR is done via Github in the PR conversation tab.")]),e._v(" "),i("p",[e._v("If this feature requires some special knowledge to test/merge it should be listed in the PR description. This includes stuff like:")]),e._v(" "),i("ul",[i("li",[e._v("run migrations")]),e._v(" "),i("li",[e._v("run seeds")]),e._v(" "),i("li",[e._v("how to use this feature")]),e._v(" "),i("li",[e._v("...")])]),e._v(" "),i("p",[e._v("Each PR should have a succeeding test build.")]),e._v(" "),i("h2",{attrs:{id:"staging"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#staging","aria-hidden":"true"}},[e._v("#")]),e._v(" Staging")]),e._v(" "),i("p",[e._v("After the PR has been approved, the teamlead is ready to merge the branch into staging. From this moment, the client\nis able to view the new feature on the test environment.")]),e._v(" "),i("h2",{attrs:{id:"production"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#production","aria-hidden":"true"}},[e._v("#")]),e._v(" Production")]),e._v(" "),i("p",[e._v("Once the feature has been approved by the projecteam, teamlead and client, we schedule the release to production.\nThis involves the following procedure:")]),e._v(" "),i("ul",[i("li",[e._v("release is planned and known by the entire projectteam")]),e._v(" "),i("li",[e._v("projectteam is on standby during the release. This is mainly for bigger features.")]),e._v(" "),i("li",[e._v("Feature branch is merged into master")]),e._v(" "),i("li",[e._v("master branch is deployed to production server.")]),e._v(" "),i("li",[e._v("visual confirmation of feature on production.")])])])}],!1,null,null,null);r.options.__file="git-workflow.md";t.default=r.exports}}]);